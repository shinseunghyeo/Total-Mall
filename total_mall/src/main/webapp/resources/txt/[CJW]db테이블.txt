CREATE TABLE tb_product (
    p_idx int unsigned NOT NULL AUTO_INCREMENT,
    m_idx int unsigned NOT NULL,
    category varchar(30) NOT NULL,
    product_name varchar(100) NOT NULL,
    product_code varchar(50) DEFAULT NULL,
    brand varchar(30) DEFAULT NULL,
    summary varchar(50) NOT NULL,
    detail varchar(1000) NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    origin_file_name1 varchar(50) DEFAULT NULL,
    save_file_name1 varchar(50) DEFAULT NULL,
    origin_file_name2 varchar(50) DEFAULT NULL,
    save_file_name2 varchar(50) DEFAULT NULL,
    price int unsigned NOT NULL,
    discount_rate int unsigned DEFAULT NULL,
    quantity int unsigned DEFAULT NULL,
    p_reg_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
    p_last_modified_date timestamp NULL DEFAULT CURRENT_TIMESTAMP,
    p_status decimal(1,0) DEFAULT '0',
    PRIMARY KEY (p_idx),
    KEY tb_product_fk (m_idx),
    CONSTRAINT tb_product_fk FOREIGN KEY (m_idx) REFERENCES tb_member (m_idx)
  );

  
CREATE VIEW orderList AS
SELECT c.c_idx, p.p_idx, p.m_idx, c.o_idx, c.c_quantity, o.o_update_time, 
	o.totalprice, c.payment_or_not, p.product_name, p.price, p.discount_rate, p.save_file_name1, c.m_idx AS mMIdx
FROM 
    tb_cart c 
    LEFT OUTER JOIN tb_product p ON c.p_idx = p.p_idx
    LEFT OUTER JOIN tb_order o ON c.o_idx = o.o_idx;
    
    
    
CREATE VIEW p_status_count_view AS-- 상품 상태에 따른 합계 조회 뷰
SELECT m_idx, p_status, COUNT(*) as count
FROM tb_product
WHERE p_idx IN (
    SELECT DISTINCT p_idx
    FROM tb_product
    WHERE m_idx IS NOT NULL
)
GROUP BY m_idx, p_status
ORDER BY p_status ASC;






DELIMITER //

CREATE TRIGGER update_p_status-- 트리거 설정 재고가 0이 되면 품절 상태로 바뀜
BEFORE UPDATE ON tb_product
FOR EACH ROW
BEGIN
    IF NEW.quantity = 0 THEN
        SET NEW.p_status = 2;
    END IF;
END;
//

-- 트리거 설정 판매 종료일이 오늘을 지나면 기한만료 상태로 바뀜
CREATE TRIGGER update_p_status_trigger
BEFORE UPDATE ON tb_product
FOR EACH ROW
BEGIN
    IF NEW.end_date < CURDATE() THEN
        SET NEW.p_status = 3;
    END IF;
END;
//

DELIMITER ;




-- o_status_count_view 뷰 생성
CREATE VIEW order_count_view AS
SELECT p.m_idx, c.payment_or_not, COUNT(*) AS count
FROM tb_cart c
JOIN tb_product p ON c.p_idx = p.p_idx
WHERE p.p_idx IN (
    SELECT p_idx
    FROM tb_product
) IS NOT NULL
AND c.payment_or_not NOT IN (0, 1, 11, 12, 13, 14, 15, 16)  -- 값을 제외
GROUP BY p.m_idx, c.payment_or_not
ORDER BY c.payment_or_not ASC;


-- o_status_count_view 뷰 생성
CREATE VIEW order_count_view2 AS
SELECT p.m_idx, c.payment_or_not, COUNT(*) AS count
FROM tb_cart c
JOIN tb_product p ON c.p_idx = p.p_idx
WHERE p.p_idx IN (
    SELECT p_idx
    FROM tb_product
) IS NOT NULL
AND c.payment_or_not NOT IN (0, 1, 2, 3, 4, 5, 6)  -- 값을 제외
GROUP BY p.m_idx, c.payment_or_not
ORDER BY c.payment_or_not ASC;



CREATE VIEW p_status_count_view2 AS-- 상품 상태에 따른 합계 조회 뷰(관리자)
SELECT p_status, COUNT(*) as count
FROM tb_product
WHERE p_idx IN (
    SELECT DISTINCT p_idx
    FROM tb_product
    WHERE m_idx IS NOT NULL
)
GROUP BY p_status
ORDER BY p_status ASC;


CREATE VIEW buyer_order_view AS
SELECT
	c.o_idx, c.c_idx, c.m_idx, c.c_quantity, c.c_update_time,
	p.p_idx, p.product_name, p.price, p.discount_rate, p.save_file_name1,
	o.o_update_time, o.totalprice, c.payment_or_not
FROM
	tb_cart c
	LEFT OUTER JOIN tb_product p ON c.p_idx = p.p_idx
	LEFT OUTER JOIN tb_order o ON c.o_idx = o.o_idx
WHERE c.payment_or_not NOT IN (0, 1);


CREATE VIEW member_count_view AS -- 회원 수 조회
SELECT 
  grade,
  COUNT(*) AS count
FROM 
  tb_member
WHERE 
  grade NOT IN (8)
GROUP BY 
  grade

UNION ALL

SELECT 
  0 AS grade, -- 여기서 0으로 지정
  COUNT(*) AS count
FROM 
  tb_member
WHERE 
  grade NOT IN (8)  
ORDER BY 
  grade ASC;