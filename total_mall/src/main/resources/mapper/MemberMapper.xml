<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="human.smart.totalMall.MemberMapper">
 	<!-- 회원가입 -->
 	<insert id="join" parameterType="memberVO">
 		insert into tb_member (member_id, member_pw, member_name, handphone, email, address1, address2, address3, categorie, representative_name, company_number, mutual, mail_order_number, account1, account2, depositor_name, grade)
			values(#{member_id},#{member_pw},#{member_name},#{handphone},#{email},#{address1},#{address2},#{address3}, #{categorie}, #{representative_name}, #{company_number}, #{mutual}, #{mail_order_number}, #{account1}, #{account2}, #{depositor_name}, #{grade})
 	</insert>
 	
 	<!-- 로그인 -->
 	<select id="login" parameterType="string" resultType="memberVO">
 		select * from tb_member
 			where member_id=#{member_id}
 	</select>
 	
 	<!-- 비밀번호 가져오기 -->
	<select id="getPassword" parameterType="string" resultType="string">
		select member_pw from tb_member where member_id=#{member_id} and cancel_or_not=0
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="findId" parameterType="map" resultType="memberVO">
 		select * from tb_member 
		 		 where member_name=#{member_name} and email=#{email} 
		 		 and cancel_or_not=0
 	</select>
 	
 	<!-- 비밀번호 찾기 -->
	<select id="findPw" parameterType="map" resultType="memberVO">
 		select * from tb_member 
		 		 where member_id=#{member_id} and email=#{email} 
		 		 and cancel_or_not=0
 	</select>
 	
 	<!-- 비밀번호 변경 -->
	<update id="findPwProcess" parameterType="memberVO">
		update tb_member set member_pw=#{member_pw}, last_modified_date=now()
				         where m_idx=#{m_idx}
	
	</update>
 	
 	<!-- 한 명의 회원정보 가져오기 -->
 	<select id="getMember" parameterType="_int" resultType="memberVO">
		select * from tb_member where m_idx = #{m_idx}
	</select> 
	
	
		<!-- 회원정보 전체 가져오기 -->
		<select id="getMembers" parameterType="SearchVO" resultType="memberVO">
		<choose>
			<when test="searchWord != null"><!-- 검색어가 있는 경우  -->
				select /*+ INDEX(tb_member tb_member_pk) */
				        		*
				        		from tb_member
						<choose>
						<when test="searchField == 'grade"><!-- 검색영역: 아이디 -->
								where grade like CONCAT('%',#{searchWord},'%')
							</when>
							<when test="searchField == 'member_id'"><!-- 검색영역: 아이디 -->
								where member_id like CONCAT('%',#{searchWord},'%')
							</when>
							<when test="searchField == 'member_name'"><!-- 검색영역: 이름 -->
								where member_name like CONCAT('%',#{searchWord},'%')
							</when>
							<otherwise><!-- 검색영역: 핸드폰 -->
								where handphone like CONCAT('%',#{searchWord},'%')
							</otherwise>
						</choose>
						 		order by m_idx desc
				                limit 0, 5
			</when>
			<otherwise><!-- 검색어가 없는 경우  -->
				select /*+ INDEX(tb_member tb_member_pk) */
				        		*
				        		from tb_member
				        		order by m_idx desc
				       			limit 0, 10
			</otherwise>
		</choose>
	</select>
	
	
	<!-- 회원등급 변경 -->
	<update id="gradeUpdate" parameterType="memberVO">
		update tb_member set grade=#{grade}, last_modified_date=now()
				         where m_idx=#{m_idx}
	</update>
	
	<!-- 일반 회원 회원정보 수정하기: update -->
	<update id="buyerUpdateProcess" parameterType="memberVO">
		update tb_member set member_pw=#{member_pw}, member_name=#{member_name}, handphone=#{handphone}, address1=#{address1},
							 address2=#{address2}, address3=#{address3}, categorie=#{categorie},
		                     last_modified_date=now()
				         where m_idx=#{m_idx}
	
	</update>
	
	<!-- 일반 회원 회원탈퇴하기: update -->
	<update id="cancel" parameterType="_int">
		update tb_member set cancel_or_not=1, last_modified_date=now() 
		                 where m_idx=#{m_idx}
	</update>
 	<select id="getInquirylist" resultType="VocVO">
 		select * from tb_voc
 	</select>
 	<select id="getInquirylistp" resultType="PvocVO">
 		select * from tb_pvoc
 	</select>
	
</mapper>